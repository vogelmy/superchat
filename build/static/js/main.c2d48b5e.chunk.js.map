{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","Chatroom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAUAA,IAASC,cAAc,CAIrBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAmB3B,SAASC,IAMP,OACE,wBAAQC,QANe,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,iCAUJ,SAASG,IAEP,IAAMC,EAAQC,mBAERC,EAAcT,EAAUU,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IALnC,EAOCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAPW,sBASgBC,mBAAS,IATzB,mBASXC,EATW,KASAC,EATA,KAWZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQxB,EAAKyB,YAAvBC,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZjB,EAAYkB,IAAI,CACpBC,KAAMV,EACNW,UAAWvC,IAASU,UAAU8B,WAAWC,kBACzCN,MACAC,aATgB,OAWlBP,EAAa,IACbZ,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAZvB,2CAAH,sDAejB,OACE,qCACE,iCACGlB,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,qBAAKC,IAAKjC,OAGZ,uBAAMkC,SAAUrB,EAAhB,UACE,uBAAOsB,MAAOxB,EAAWyB,SAAU,SAACtB,GAAD,OAAOF,EAAaE,EAAEuB,OAAOF,QAAQG,YAAY,uBACpF,wBAAQC,KAAK,SAASC,UAAW7B,EAAjC,sCAMR,SAASmB,EAAYW,GAAQ,IAAD,EACMA,EAAMV,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbuB,EAAexB,IAAQ1B,EAAKyB,YAAYC,IAAM,OAAS,WAE7D,OACE,sBAAKyB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKzB,IACV,4BAAIE,OAKKwB,MAzFf,WAAgB,IAAD,EAEEC,YAAatD,GAArBuD,EAFM,oBAIb,OACE,sBAAKJ,UAAU,MAAf,UACE,2BAIA,kCACGI,EAAO,cAAChD,EAAD,IAAe,cAACL,EAAD,UCzBhBsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2d48b5e.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  //old\n  //apiKey: \"AIzaSyBwQ4MtH8RbUBdjng0SlVX0DAtToTR07dw\",\n  //new\n  apiKey: \"AIzaSyAQSZfJigGmOdgfthEJccwxiV9qBD1pncE\",\n  authDomain: \"superchat22.firebaseapp.com\",\n  projectId: \"superchat22\",\n  storageBucket: \"superchat22.appspot.com\",\n  messagingSenderId: \"252201398453\",\n  appId: \"1:252201398453:web:091e6f4bc3bf2ff0d3cefc\",\n  measurementId: \"G-H5QV37NQRN\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n\n      </header>\n\n      <section>\n        {user ? <Chatroom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction Chatroom() {\n\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n        <div ref={dummy}></div>\n\n      </main>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n        <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}